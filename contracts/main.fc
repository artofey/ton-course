#include "imports/stdlib.fc";

(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter
        ds~load_msg_address(), ;; the most recent sender
        ds~load_msg_address() ;; owner
    );
}

() save_data(int counter_value, slice recent_sender, slice owner) impure inline {
    set_data(begin_cell()
        .store_uint(counter_value, 32)
        .store_slice(recent_sender)
        .store_slice(owner)
        .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if (op == 1) {
        ;; counter logic is comming here
        slice ds = get_data().begin_parse();
        int counter = ds~load_uint(32);
        set_data(
            begin_cell().store_uint(counter + 1, 32).store_slice(sender_address).end_cell()
        );
    }
}

(int, slice) get_contract_storage_data() method_id {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),
        ds~load_msg_addr()
    );
}